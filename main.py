import copy
import numpy as np


def swap(row1, row2, len):
    for i in range(len):
        row1[i], row2[i] = row2[i], row1[i]
    return row1, row2


# 1.1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é REF(), –ø—Ä–∏–≤–æ–¥—è—â—É—é –º–∞—Ç—Ä–∏—Ü—É –∫ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º—É –≤–∏–¥—É.
def REF(origMatrix):
    matrix = copy.deepcopy(origMatrix)
    k = matrix.shape[0]
    n = matrix.shape[1]
    curRow = 0
    for j in range(n):
        for i in range(curRow + 1, k):
            if matrix[i][j] == 1:
                if matrix[curRow][j] == 0:
                    swap(matrix[curRow], matrix[i], k)
                else:
                    matrix[i] = (matrix[i] + matrix[curRow]) % 2
        if matrix[curRow][j] == 1:
            curRow += 1
            if curRow == k:
                break
    return matrix[0:curRow]


# 1.2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é RREF(), –ø—Ä–∏–≤–æ–¥—è—â—É—é –º–∞—Ç—Ä–∏—Ü—É –∫ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º—É —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º—É –≤–∏–¥—É.
def RREF(origMatrix):
    matrix = copy.deepcopy(origMatrix)
    k = matrix.shape[0]
    n = matrix.shape[1]
    curRow = 0
    for j in range(n):
        for i in range(curRow + 1, k):
            if matrix[i][j] == 1:
                if matrix[curRow][j] == 0:
                    swap(matrix[curRow], matrix[i], k)
                else:
                    matrix[i] = (matrix[i] + matrix[curRow]) % 2
        if matrix[curRow][j] == 1:
            curRow += 1
            if curRow == k:
                break

    for i in range(k - 1, -1, -1):
        curCol = 0
        for j in range(0, n):
            if matrix[i][j] == 1:
                curCol = j
                break
        for j in range(i):
            if matrix[j][curCol] == 1:
                matrix[j] = (matrix[j] + matrix[i]) % 2
    return matrix[0:curRow]


class LinearCode:

    def __init__(self, M):
        self.M = M
        self.G = REF(self.M)
        self.RG = RREF(self.G)
        self.k = self.G.shape[0]
        self.n = self.G.shape[1]
        self.lead = self.getPositions(self.RG)
        self.X = self.createX(self.lead, self.RG)
        self.H = self.createH(self.lead, self.X)
        self.Code1 = self.createCode1(self.G)

    # –≤–µ–¥—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã lead –º–∞—Ç—Ä–∏—Ü—ã ùêÜ‚àó
    def getPositions(self, originalMatrix):
        lead = np.zeros(self.k, dtype=int)
        j = 0
        for i in range(self.n):  # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
            if j == self.k:  # –µ—Å–ª–∏ –≤—Å–µ –≤–µ–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
                break
            if originalMatrix[j][i] == 1:  # –µ—Å–ª–∏ —ç—Ç–æ –≤–µ–¥—É—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
                lead[j] = i  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–µ–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                j += 1
        return lead

    # —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ ùêó, —É–¥–∞–ª–∏–≤ –≤–µ–¥—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã G‚àó
    def createX(self, lead, originalMatrix):
        new_M = np.zeros((self.k, self.n - len(lead)), dtype=int)
        n = 0
        for i in range(self.k):
            for j in range(self.n):
                if j not in lead:
                    new_M[i][n] = originalMatrix[i][j]
                    n += 1
            n = 0
        return new_M

    # –º–∞—Ç—Ä–∏—Ü–∞ ùêá, —Å—Ç—Ä–æ–∫–∏,—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏—è–º –≤–µ–¥—É—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —Å—Ç—Ä–æ–∫–∏ –∏–∑ ùêó,
    # –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äì —Å—Ç—Ä–æ–∫–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
    def createH(self, lead, X):
        H = np.zeros((self.n, self.n - self.k), dtype=int)
        t = 0
        j = 0
        for i in range(self.n):
            if i in lead:
                H[i] = X[t]
                t += 1
            else:
                H[i][j] = 1
                j += 1
        return H

    def createCode1(self, G):
        sum = 0
        for i in range(self.k + 1):
            sum += i
        Words = np.zeros((sum, self.n), dtype=int)
        t = 0
        for i in range(self.k):
            for j in range(i, self.k):
                Words[t] = (G[i] + G[j]) % 2
                t += 1
        Words = np.unique(Words, axis=0)
        return Words


# 1.3.1 –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–∂–¥–∞—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º –≤–∏–¥–µ
matrix = np.array([[1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                   [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0],
                   [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],
                   [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0],
                   [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],
                   [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]], dtype=int)

lc = LinearCode(matrix)

print("S:\n", matrix)
print("S_REF:\n", REF(matrix))
new_matrix = matrix
print("S_RREF:\n", RREF(new_matrix))

# 1.3.2 –ó–∞–¥–∞—Ç—å n —Ä–∞–≤–Ω–æ–µ —á–∏—Å–ª—É —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ k —Ä–∞–≤–Ω–æ–µ —á–∏—Å–ª—É —Å—Ç—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã (–±–µ–∑ —É—á—ë—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω—É–ª–µ–≤—ã—Ö —Å—Ç—Ä–æ–∫)
G = REF(matrix)
print("n = ", G.shape[1])
print("k = ", G.shape[0])
print("------------------")

# 1.3.3 –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π
print("G:\n", G)
G = RREF(G)
print("G*:\n", G)
print("lead = ", lc.lead)
print("X:\n", lc.X)
print("H:\n", lc.H)
print("---------------------------")

# 1.4. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã 11 –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.
# 1.4.1 –°–ª–æ–∂–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –æ—Å—Ç–∞–≤–∏—Ç—å
# –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è.

# 1.4.2 –í–∑—è—Ç—å –≤—Å–µ –¥–≤–æ–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã 5, —É–º–Ω–æ–∂–∏—Ç—å –∫–∞–∂–¥–æ–µ –Ω–∞ G.
G = np.array([[1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1],
              [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0],
              [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],
              [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],
              [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]], dtype=int)

print("G:\n", lc.G)
print("H:\n", lc.H)
print("Result:")
print("C1:\n", lc.Code1)
